generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

generator fabbrica {
  provider = "prisma-fabbrica"
  output   = "../src/generated/fabbrica"
}

generator zod {
  provider = "prisma-zod-generator"
  output   = "../src/generated/types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username       String   @unique @db.VarChar(100)
  email          String   @unique
  artistName     String   @map("artist_name") @db.VarChar(100)
  description    String?
  profilePicture String   @default("Default") @map("profile_picture")
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dateOfBirth    DateTime @map("date_of_birth")
  memberSince    DateTime @default(now()) @map("member_since")
  serial         Int      @unique @default(autoincrement())
  songs          Song[]
  albums         Album[]

  @@map("users")
}

model Song {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  artist      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String   @db.VarChar(100)
  description String?
  source      String
  releaseDate DateTime @map("release_date")
  albumIndex  Int      @map("album_index")
  albumId     String   @map("album_id") @db.Uuid
  album       Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@map("songs")
}

model Album {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String  @map("user_id") @db.Uuid
  name        String  @db.VarChar(100)
  description String?
  frontCover  String? @map("front_cover")
  backCover   String? @map("back_cover")
  songs       Song[]
  artist      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("albums")
}
